AWSTemplateFormatVersion: 2010-09-09
Description: Website management pipeline

Parameters:
  RepositoryName:
    Type: String
    Description: The name of the CodeCommit repository to create
  CodePipelineS3BucketName:
    Type: String
    Description: The name of the S3 bucket to create that will be used to store artifacts from CodePipeline execution runs.
  CloudFormationDeployActionRoleName:
    Type: String
    Description: The name of the IAM role that will be created to run the CloudFormation deployment action as.
  CodePipelineRoleName:
    Type: String
    Description: The name of the IAM role that will be created for the CodePipeline to use.
  CodePipelineName:
    Type: String
    Description: The name of the CodePipeline to create.
  StageAdministerPipelineStackName:
    Type: String
    Description: The name of this stack that is creating the pipeline. If the names do not match then the pipeline will not be able to update itself.
  StageDevelopmentInfrastructureStackName:
    Type: String
    Description: The name of the stack that administers the Development website infrastructure.
  StageProductionInfrastructureStackName:
    Type: String
    Description: The name of the stack that administers the Production website infrastructure.
  ProductionAccount:
    Type: string
    Description: The AWS Account number of the production account.

Resources:

  CodeCommitRepository:
    Type: 'AWS::CodeCommit::Repository'
    Properties:
      RepositoryName: !Ref RepositoryName
      RepositoryDescription: !Join [' ', [!Ref RepositoryName, 'CodeCommit Repository']]

  CodePipelineBucket:
    Type: 'AWS::S3::Bucket'
    Properties:
      BucketName: !Ref CodePipelineS3BucketName

  CodePipelineBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref CodePipelineBucket
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action: ['s3:*']
            Effect: Allow
            Resource:
              - !Sub arn:aws:s3:::${CodePipelineBucket}
              - !Sub arn:aws:s3:::${CodePipelineBucket}/*
            Principal:
              AWS:
                - !Sub arn:aws:iam::${AWS::AccountId}:role/${CodePipelineRoleName}
                - !Sub arn:aws:iam::${AWS::AccountId}:role/${CloudFormationDeployActionRoleName}
                - !Sub arn:aws:iam::${ProductionAccount}:role/CloudFormationAssumeRole
                - !Sub arn:aws:iam::${ProductionAccount}:role/CloudFormationDeployerRole

  CloudFormationDeployActionRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Action: ['sts:AssumeRole']
          Effect: Allow
          Principal:
            Service: [cloudformation.amazonaws.com]
        Version: '2012-10-17'ProductionAccount
      Path: /
      Policies:
        - PolicyName: CloudFormationRole
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Action:
                  - 'codebuild:*'
                  - 'codecommit:*'
                  - 'cloudformation:*'
                  - 'codepipeline:*'
                  - 'cloudfront:*'
                  - 'iam:*'
                  - 's3:*'
                  - 'route53:*'
                  - 'kms:*
                Effect: Allow
                Resource: '*'
      RoleName: !Ref CloudFormationDeployActionRoleName

  CodePipelineRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - codepipeline.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
      Policies:
        - PolicyName: codepipeline-service
          PolicyDocument:
            Statement:
              - Action:
                  - codecommit:GetBranch
                  - codecommit:GetCommit
                  - codecommit:UploadArchive
                  - codecommit:GetUploadArchiveStatus
                  - codecommit:CancelUploadArchive

                  - codebuild:BatchGetBuilds
                  - codebuild:StartBuild

                  - s3:GetObject
                  - s3:GetObjectVersion
                  - s3:GetBucketVersioning
                  - s3:PutObject

                  - cloudformation:GetTemplate
                  - cloudformation:DescribeStackResource
                  - cloudformation:DescribeStackResources
                  - cloudformation:DescribeStackEvents
                  - cloudformation:DescribeStacks
                  - cloudformation:UpdateStack
                  - cloudformation:CreateStack
                  - cloudformation:DeleteStack

                  - 'iam:PassRole'
                Resource: '*'
                Effect: Allow
              - Action: ['sts:AssumeRole']
                Effect: Allow
                Resource: !Join ['', ['arn:aws:iam::', !Ref ProductionAccount, ':role/CloudFormationAssumeRole']]
            Version: 2012-10-17
      RoleName: !Ref CodePipelineRoleName

  CodePipeline:
    Type: 'AWS::CodePipeline::Pipeline'
    DependsOn:
      - CodePipelineRole
    Properties:
      ArtifactStore:
        Type: S3
        Location: !Ref CodePipelineBucket
        EncryptionKey:
          Id: !Ref KMSKey
          Type: KMS
      Name: !Ref CodePipelineName
      RestartExecutionOnUpdate: true
      RoleArn: !Join ['', ['arn:aws:iam::',!Ref 'AWS::AccountId',':role/',!Ref CodePipelineRole]]
      Stages:
        - Name: Source
          Actions:
            - InputArtifacts: []
              Name: Source
              ActionTypeId:
                Category: Source
                Owner: AWS
                Version: '1'
                Provider: CodeCommit
              OutputArtifacts:
                - Name:  !Join ['', [!Ref RepositoryName, 'Source']]
              Configuration:
                BranchName: 'master'
                RepositoryName: !GetAtt CodeCommitRepository.Name
              RunOrder: 1
        - Name: 'AdministerPipeline'
          Actions:
            - Name: 'AdministerPipeline'
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Provider: CloudFormation
                Version: '1'
              Configuration:
                ActionMode: REPLACE_ON_FAILURE
                Capabilities: CAPABILITY_NAMED_IAM
                RoleArn: !GetAtt [CloudFormationDeployActionRole, Arn]
                StackName: !Ref StageAdministerPipelineStackName
                TemplateConfiguration: !Join ['', [!Ref RepositoryName, 'Source', '::aws_seed.json']]
                TemplatePath: !Join ['', [!Ref RepositoryName, 'Source', '::aws_seed.yml']]
              InputArtifacts:
                - Name: !Join ['', [!Ref RepositoryName, 'Source']]
              RunOrder: '1'
        - Name: 'Development'
          Actions:
            - Name: 'Infrastructure'
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Provider: CloudFormation
                Version: '1'
              Configuration:
                ActionMode: REPLACE_ON_FAILURE
                Capabilities: CAPABILITY_NAMED_IAM
                RoleArn: !GetAtt [CloudFormationDeployActionRole, Arn]
                StackName: !Ref StageDevelopmentInfrastructureStackName
                TemplateConfiguration: !Join ['', [!Ref RepositoryName, 'Source', '::aws_infrastructure.json']]
                TemplatePath: !Join ['', [!Ref RepositoryName, 'Source', '::aws_infrastructure.yml']]
              InputArtifacts:
                - Name: !Join ['', [!Ref RepositoryName, 'Source']]
              RunOrder: '10'
        - Name: 'Production'
          Actions:
            - Name: 'Infrastructure'
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Provider: CloudFormation
                Version: '1'
              Configuration:
                ActionMode: REPLACE_ON_FAILURE
                Capabilities: CAPABILITY_NAMED_IAM
                RoleArn: !Join ['', ['arn:aws:iam::', !Ref ProductionAccount, ':role/CloudFormationDeployerRole']]
                StackName: !Ref StageProductionInfrastructureStackName
                TemplateConfiguration: !Join ['', [!Ref RepositoryName, 'Source', '::aws_infrastructure_production.json']]
                TemplatePath: !Join ['', [!Ref RepositoryName, 'Source', '::aws_infrastructure.yml']]
              InputArtifacts:
                - Name: !Join ['', [!Ref RepositoryName, 'Source']]
              RoleArn: !Join ['', ['arn:aws:iam::', !Ref ProductionAccount, ':role/CloudFormationAssumeRole']]
              RunOrder: '10'

  KMSKey:
    Type: AWS::KMS::Key
    Properties:
      Description: Used by Assumed Roles in Dev/Test/Prod accounts to Encrypt/Decrypt code
      Enabled: true
      EnableKeyRotation: true
      KeyPolicy:
        Version: "2012-10-17"
        Id: !Ref AWS::StackName
        Statement:
          -
            Sid: Allows admin of the key
            Effect: Allow
            Principal:
              AWS: !Sub arn:aws:iam::${AWS::AccountId}:root
            Action:
              - kms:*
            Resource: "*"
          -
            Sid: Allow use of key in another account
            Effect: Allow
            Principal:
              AWS:
                - !Sub arn:aws:iam::${ProductionAccount}:root
                # If adding additional accounts put them just in here and add the parameter up the top!
            Action:
              - kms:Encrypt
              - kms:Decrypt
              - kms:ReEncrypt*
              - kms:GenerateDataKey*
              - kms:DescribeKey
            Resource: "*"

  KMSKeyAlias:
    Type: AWS::KMS::Alias
    Properties:
      AliasName: alias/codepipeline-crossaccount-key
      TargetKeyId: !Ref KMSKey

Outputs:
  CodeCommitRepositoryArn:
    Description: CodeCommit Arn
    Export:
      Name: !Join ['', [!Ref 'AWS::StackName', 'CodeCommitRepositoryArn']]
    Value: !GetAtt CodeCommitRepository.Arn
  CodeCommitRepositoryCloneUrlHttp:
    Description: CodeCommit CloneUrlHttp
    Export:
      Name: !Join ['', [!Ref 'AWS::StackName', 'CodeCommitRepositoryCloneUrlHttp']]
    Value: !GetAtt CodeCommitRepository.CloneUrlHttp
  CodePipelineBucketArn:
    Description: CodePipeline S3 Bucket Arn
    Export:
      Name: !Join ['', [!Ref 'AWS::StackName', 'CodePipelineBucketArn']]
    Value: !GetAtt CodePipelineBucket.Arn
  CodePipelineBucketDomainName:
    Description: CodePipeline S3 Bucket DomainName
    Export:
      Name: !Join ['', [!Ref 'AWS::StackName', 'CodePipelineBucketDomainName']]
    Value: !GetAtt CodePipelineBucket.DomainName
  CodePipelineBucketWebsiteURL:
    Description: CodePipeline S3 Bucket WebsiteURL
    Export:
      Name: !Join ['', [!Ref 'AWS::StackName', 'CodePipelineBucketWebsiteURL']]
    Value: !GetAtt CodePipelineBucket.WebsiteURL
  CloudFormationDeployActionRoleArn:
    Description: CloudFormationDeployActionRole Arn
    Export:
      Name: !Join ['', [!Ref 'AWS::StackName', 'CloudFormationDeployActionRoleArn']]
    Value: !GetAtt CloudFormationDeployActionRole.Arn
  CodePipelineRoleArn:
    Description: CodePipelineRole Arn
    Export:
      Name: !Join ['', [!Ref 'AWS::StackName', 'CodePipelineRoleArn']]
    Value: !GetAtt CodePipelineRole.Arn
  CodePipelineName:
    Description: CodePipeline Name
    Export:
      Name: !Join ['', [!Ref 'AWS::StackName', 'CodePipelineName']]
    Value: !Ref CodePipeline
  KMSKeyId:
    Description: KMSKey Id
    Export:
      Name: !Join ['', [!Ref 'AWS::StackName', 'KMSKeyId']]
    Value: !Ref KMSKey
  KMSKeyArn:
    Description: KMSKey Arn
    Export:
      Name: !Join ['', [!Ref 'AWS::StackName', 'KMSKeyArn']]
    Value: !GetAtt KMSKey.Arn
